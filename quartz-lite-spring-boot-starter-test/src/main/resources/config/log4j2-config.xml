<?xml version="1.0" encoding="UTF-8"?>
<!--
    主标签，有两个log4j2的关键属性：
    status：设置log4j2的自身log级别。日志级别： OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL，
    其中 off 表示关闭日志输出，fatal 表示严重错误。
    monitorInterval：Log4j2能够自动检测配置文件变化，并使用新的配置，这个单位是秒。
-->
<!--设置log4j2的自身log级别为warn -->
<Configuration status="warn">

    <!--自定义属性-->
    <properties>
        <!--输出日志的格式：
            %level{参数1}{参数2}{参数3} ##输出日志的级别
            %d{yyyy-MM-dd HH:mm:ss, SSS}：日志生产时间
            %t：打印日志方法所在线程名
            %p：日志输出格式
            %F|%file                  ##输出文件名
            %c{参数} 或 %logger{参数}  ##输出日志名称
            %C{参数} 或 %class{参数    ##输出类型
            %m 或 %msg 或 %message ##输出日志信息
            %n：换行符
            %C：Java类名
            %l  ##输出错误的完整位置
            %L：日志输出所在行数
            %M 或 %method ##输出方法名
            hostName：本地机器名
            hostAddress：本地ip地址
            highlight{pattern}{style} ##高亮显示
        -->
        <property name="pattern">%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5level %C{36}.%M(%F:%L) %msg%xEx%n</property>
    </properties>

    <Appenders>
        <Console name="ConsoleLog" target="SYSTEM_OUT">
            <!--只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch） -->
            <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
            <!--输出日志的格式，引用自定义模板 pattern -->
            <PatternLayout charset="UTF-8" pattern="${pattern}"/>
        </Console>
    </Appenders>

    <!--然后定义logger，只有定义了logger并引入上面定义的appender，appender才会生效 -->
    <Loggers>
        <!--过滤掉spring等框架的无用日志信息，也可以在springboot的logging.level.org.springframework=FATAL设置-->
        <logger name="org.springframework" level="info"/>

        <!--建立一个默认的Root的logger，记录>=level的信息，如果这里的level高于Appenders中的，则Appenders中也是以此等级为起点。
            比如，这里level="fatal"，则Appenders中只出现fatal信息。
            温馨提示：prodlevel建议设置为warn
        -->
        <Root level="info">
            <!-- 输出器，可选上面定义的任何项组合，或全选-->
            <appender-ref ref="ConsoleLog"/>
        </Root>
    </Loggers>

</Configuration>